#include<iostream>
using namespace std;

void heapify(int arr[] , int N , int i)
{

    int largest = i;   // mark as a root
  
    // left = 2*i + 1
    int l = 2 * i + 1;  // if starting from 0th index 
                        // or left = 2*i  only if starting from the 1st index
  
    // right = 2*i + 2
    int r = 2 * i + 2;    // or 2*i + 1 if starting from 1st index
  
    // If left child is larger than root
    if (l < N && arr[l] > arr[largest])   //check if left goes beyond the n .
        largest = l;      // if root is smaller  then the left then change them and swap them afterwards
  
    // If right child is larger than largest
    // so far
    if (r < N && arr[r] > arr[largest])   //same as procedure is left
        largest = r;
  
    // If largest is not root
    if (largest != i) {
        swap(arr[i], arr[largest]);   //now swap
  
        // Recursively heapify 
        heapify(arr, N, largest);
    }
}

void heapsort(int arr[] , int n)
{
    for (int i = n / 2 - 1; i >= 0; i--)  // we start from n/2 because we consider the leaf nodes already as a max heap
        heapify(arr, n, i);  // convert the array to a max heap (complete binary tree)

  //now this the sorting part
    for (int i = n - 1; i > 0; i--) {
      // we know that  the root node is the largest so we will swap it with last then . heapify it again but upto n-1 , beacause it last we have largest and continue this proess upto i > 0 ;
  
        // Move current root to end
        swap(arr[0], arr[i]);
  
        // call max heapify on the reduced heap
        heapify(arr, i, 0);
    } 
}
void printArray(int arr[], int N)
{
    for (int i = 0; i < N; ++i)
        cout << arr[i] << " ";
    cout << "\n";
}
int main()
{
  int arr[] = { 12, 11, 13, 5, 6, 7 };
    int N = sizeof(arr) / sizeof(arr[0]);

  heapsort(arr, N );

 cout << "Sorted array is \n";
    printArray(arr, N);

  
  }

// tc = n(log n)
